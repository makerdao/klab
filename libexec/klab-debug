#!/usr/bin/env node
const xs = require("xstream").default;
const {run} = require("@cycle/run");
const {docopt} = require("docopt");
const fs = require("fs");
const path = require("path");
const onionify = require('cycle-onionify').default;
const sampleCombine = require("xstream/extra/sampleCombine").default;
process.title = "klab";

const makeConfig = require("../lib/config.js");
const makeCliDriver = require("../lib/driver/cliDriver.js")
const dbDriver = require("../lib/driver/dbDriver.js")
const move = require("../lib/move.js");
const exec = require("../lib/exec.js");
const view = require("../lib/view.js");
const link = require("../lib/link.js");
const pull = require("../lib/pull.js");
const { genBehaviour } = require("../lib/behavior.js");
const {
  prune_edges,
} = require("../lib/compile.js");
const {
  testPath,
  revert,
  warn,
  read
} = require("../lib/util.js");

const KLAB_OUT = process.env.KLAB_OUT || "out";
const KLAB_WD_PATH = path.join(KLAB_OUT, "data");

const usage = `
Usage:
  klab debug [options] [<hash>]

Options:
  --filter-oog
`

const cmd = docopt(usage, {
  argv: ["debug"].concat(process.argv.slice(2))
});

const proofid = cmd['<hash>'] || process.env.KLAB_HEAD || (testPath(path.join(KLAB_OUT, "HEAD")) && read(path.join(KLAB_OUT, "HEAD"))).trim();
const FILTER_OOG = cmd['--filter-oog'];

console.log("pruning edges...");
const {pruned_edges, initt, targett, finished, steps, rule_debug} = prune_edges(proofid, {verbose: true});
console.log("objectify finished...");
const finished_ = finished
  .reduce((a, node) => ({...a, [node]: true}), {});
console.log("objectify steps...");
const steps_ = steps
  .reduce((a, step) => { a[step] = true; return a; }, {});
// generate coedges
console.log("construct coedges...");
const coedges = Object.keys(pruned_edges)
  .reduce((coedges, from) =>
    pruned_edges[from]
      .reduce((a, toO) => {
        a[toO.to] = (a[toO.to] || []).concat(toO)
        return a;
      }, coedges)
  , {})


console.log("gather debug info...");
const debug_constraints = {};
const debug_rules = {};

Object.keys(rule_debug)
  .forEach(nodeid => Object.keys(rule_debug[nodeid])
    .forEach(ruleid => {
      debug_rules[ruleid] = true;
      Object.keys(rule_debug[nodeid][ruleid])
      .forEach(constraintid => {
        debug_constraints[constraintid] = true;
        Object.keys(rule_debug[nodeid][ruleid][constraintid] || {})
          .forEach(z3id => {
            let z3result = rule_debug[nodeid][ruleid][constraintid][z3id]
            debug_constraints[z3result] = true;
          })
      })
    })
  )

const status = testPath(path.join(KLAB_OUT, 'pass', proofid)) && 'pass'
    || (testPath(path.join(KLAB_OUT, 'fail', proofid)) && 'fail')
    || (testPath(path.join(KLAB_OUT, 'meta', 'running', proofid)) && 'running')
    || 'unknown'

// preload constraints and rules
console.log("gathering rule and constraint ids...");
const rule_blobs_O = debug_rules
const constraint_blobs_O = debug_constraints;

Object.keys(pruned_edges)
  .forEach(ekey => {
    pruned_edges[ekey]
      .forEach(edge => {
        constraint_blobs_O[edge.from.split('_')[1]] = true;
        constraint_blobs_O[edge.to.split('_')[1]] = true;
        rule_blobs_O[edge.rule] = true;
      })
  });
const rule_blobs = Object.keys(rule_blobs_O)
const constraint_blobs = Object.keys(constraint_blobs_O);



const E = pruned_edges;
const traverse = (firstNode) => {
  var c = firstNode;
  while(c in E && E[c].length == 1) {
    c = E[c][0].to;
  }
  let b = "";
  return (!(c in E) || E[c].length == 0)
    && [c.split('_')[0]]
    || E[c]
      .map(step => traverse(step.to))
      .reduce((a, e) => a.concat(e), [])
}

console.log("collecting key terms");
const key_terms = traverse(initt);
console.log("reading constraints: " + constraint_blobs.length + " and key terms: " + key_terms.length);
const blobs_data = {};

if(targett) {
constraint_blobs.concat(key_terms).concat(targett.split("_")[0])
  .forEach((blobid, i) => {
    console.log(i);
    const json = JSON.parse(read(path.join(KLAB_WD_PATH, `${proofid}.k_blobs`, blobid + ".json"))).term;
    blobs_data[blobid] = json;
  })
}

console.log("reading rules: " + rule_blobs.length);
const rules_data = rule_blobs
    .reduce((a, ruleid) => {
      if(a && !a[ruleid]) {
        try { a[ruleid] = JSON.parse(read(path.join(KLAB_WD_PATH, `${proofid}.k_blobs`, ruleid + ".json"))) }
        catch(e) {console.log('bad json: ' + path.join(KLAB_WD_PATH, `${proofid}.k_blobs`, ruleid + ".json"))}
      }
      return a;
    }, {})

  //     .map(blobid => {
  //       let jsonn;
  //       try { jsonn = JSON.parse(read(path.join(KLAB_WD_PATH, `${proofid}.k_blobs`, blobid + ".json")))       } catch(e) { console.log('bad json: ' + path.join(KLAB_WD_PATH, `${proofid}.k_blobs`, blobid + ".json"))}
  //       return [blobid, jsonn]})
  // .reduce((a, [id, json]) => ({...a, [id]: json.term}), {})

const state = {
  edges: pruned_edges,      // done: klab compile-fsm
  coedges,
  initt,                    // done: klab compile-fsm
  targett,
  rule_debug,
  finished: finished_,      // done: klab compile-fsm
  steps: steps_,
  nodes: blobs_data,
  rules: rules_data,
  status,
  path: [{
    "type": "step",
    "count": 0,
    "step": {
      "from": "",
      "to": initt,
      "rule": ""
    }
  }]
};

const meta_path = path.join(KLAB_OUT, 'meta', 'data', proofid);
var meta = {};
if(testPath(meta_path)) meta = JSON.parse(read(meta_path))
const config = {
  ...meta,
  control: {
    "0"      : "branch 0",
    "1"      : "branch 1",
    "2"      : "branch 2",
    "3"      : "branch 3",
    "4"      : "branch 4",
    "5"      : "branch 5",
    "6"      : "branch 6",
    "S-n"    : "next_k",
    "S-p"    : "prev_k",
    "n"      : "next_step",
    "p"      : "prev_step",
    "C-n"    : "next_branch",
    "C-p"    : "prev_branch",
    "e"      : "toggle_module evm",
    "g"      : "toggle_module gas",
    "m"      : "toggle_module memory",
    "b"      : "toggle_module behaviour",
    "c"      : "toggle_module constraint",
    "s"      : "toggle_module sourcemap",
    "r"      : "toggle_module rule",
    "k"      : "toggle_module kcell",
    "z"      : "toggle_module z3feedback",
    "d"      : "toggle_module debug",
    "t"      : "toggle_module term",
    "S-t"    : "toggle_module target_unification",
    "up"     : "scroll_up",
    "down"   : "scroll_down",
    "pagedown" : "page_down",
    "pageup"   : "page_up",
    "home"     : "home"
  },
  proofid,
  FILTER_OOG
};

const CLIDriver = makeCliDriver({
    // type: "console",
    // in: false
  })

const { behaviour } = genBehaviour(state);

const drivers = {
  K: dbDriver,
  CLI: CLIDriver,
  Settings: () => xs.of({...state, config, behaviour, show: {}})
};

const main = ({ CLI, Settings, onion, K }) => {

  const boot$ = Settings
    .map(state => () => state)

  CLI
    .filter(key => key.full == "C-c")
    .addListener({
      next: i => process.exit(),
      error: err => console.error(err),
      complete: () => console.log('completed'),
    })

  const cmd$ = CLI
    .compose(sampleCombine(onion.state$))
  // only if not in cmd_mode
    .filter(([_, state]) => !state.cmd_mode)
  // .map(([key, _]) => key)
  // find the command
    .map(([key, state]) => [key.full, state.config.control[key.full]])
    .filter(([key, cmd]) => !!cmd)
    .map(([key, cmd]) => cmd && ({ key, cmd }))
  // costom command
  const {ccmd$, crun$} = exec({CLI, onion});

  // update state based on user input
  const move$ = xs.merge(cmd$, crun$)
    .compose(move)

  let link$ = K
    .compose(link);
  const {
    pull$
  } = pull({K, onion})

  let view$ = view({onion});

  return {
    CLI: view$,
    K: pull$,
    onion: xs.merge(
      link$,
      move$,
      boot$,
      ccmd$
    )
  };
};

const wrappedMain = onionify(main);

run(wrappedMain, drivers)
