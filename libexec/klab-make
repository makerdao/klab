#!/usr/bin/env node

const fs         = require("fs");
const marked     = require("marked");
const _          = require("lodash");
const makeConfig = require("../lib/config.js");
const {
  parseAct,
  caseSplitAct,
  newCleanup,
  makeInterabiExhaustiveness
}                = require("../lib/build.js");
const {
  read,
  revert,
  testPath,
}                = require("../lib/util.js");

const __a2n = act => act.subject + "_" + act.name;

const KLAB_OUT       = process.env.KLAB_OUT       || "out";
const KLAB_EVMS_PATH = process.env.KLAB_EVMS_PATH || "/";

const usage = `
Usage:
  klab make
`

if (!testPath("./config.json")) {revert("No config.json file in directory. Review `klab/examples` folder for inspiration")}
const config_json   = JSON.parse(fs.readFileSync("./config.json"));
const config        = makeConfig(config_json);
const config_path   = config.src.specification;
const raw_md_config = Array.isArray(config_path) && config_path.map(p => read(p)).join("\n\n") || read(config_path)

const dir_list = [ KLAB_OUT
                 , KLAB_OUT + '/specs'
                 , KLAB_OUT + '/built'
                 , KLAB_OUT + '/accept'
                 , KLAB_OUT + '/acts'
                 , KLAB_OUT + '/gas'
                 , KLAB_OUT + '/meta'
                 , KLAB_OUT + '/meta/name'
                 , KLAB_OUT + '/meta/data'
                 , KLAB_OUT + '/output'
                 ]

for (i in dir_list) {
  dname = dir_list[i]
  if (! fs.existsSync(dname)) {
    fs.mkdirSync(dname);
  }
}

const tokens        = marked.lexer(raw_md_config)
const parsed_tokens = tokens
  .map(t => {
    if(t.type === 'code' && t.lang === "act") {
      const parsedAct = parseAct(config)(t.text, true);
      const cases = caseSplitAct(config)(parsedAct);
      return {
        type: 'code',
        lang: "act",
        obj: parsedAct,
        cases: cases,
        text: newCleanup(parsedAct, t.text)
      };
    } else {
      return t;
    }
  });

const act_collection = parsed_tokens
  .filter(e => e.type === "code" && e.lang === "act")
  .map(e => e.cases)
  .reduce((a, cs) => a.concat(cs), [])

var exhaustiveness_set = new Set()
for (var act_num in act_collection) {
  exhaustiveness_set.add(act_collection[act_num].act.subject + '__exhaustiveness')
}
const exhaustiveness = [...exhaustiveness_set]

const dependencies = Object.assign({},
  ...act_collection
  .map((a) => ({ [a.name]: (a.act.calls || []).map(d => d.replace('.', '_') + '_pass') })))

output_makefile = []
fail_rough = []
pass_rough = []
pass = []
output_makefile.push('KLAB             := klab')
output_makefile.push('HASH             := klab hash')
output_makefile.push('PROVE            := $(KLAB) prove --backend-dir $(KLAB_OUT)/specs')
output_makefile.push('BUILD            := $(KLAB) build-spec')
output_makefile.push('GET_GAS          := $(KLAB) get-gas')
output_makefile.push('WRITE_GAS        := $(KLAB) simplify-gas')
output_makefile.push('KLAB_MAKE        := $(KLAB) make')
output_makefile.push('PROVE_DUMP       := $(KLAB) prove --dump --backend-dir $(KLAB_OUT)/specs')
output_makefile.push('CHECK_SUB_LEMMAS := $(KLAB) check-sublemmas')
output_makefile.push('')
output_makefile.push('CONCRETE_RULES := "' + config_json['src']['concrete-rules'].join(',').replace(/#/g, '\\#') + '"')
output_makefile.push('SPEC_SRCS      := $(KLAB_OUT)/specs/verification-kompiled/timestamp $(KLAB_OUT)/dir.timestamp ' + config_json['src']['specification'])
output_makefile.push('')
for (var dep_name in dependencies) {
  let isRough                = dep_name.endsWith('_rough')
  let dep_name_without_rough = isRough ? dep_name.substring(0, dep_name.length - 6) : dep_name
  let dep_subtargets         = dependencies[dep_name]
  let isPass                 = dep_name.endsWith('_pass_rough') || dep_name.endsWith('_pass')
  let subtarget_string       = dep_subtargets.map(d => '$(KLAB_OUT)/accept/' + d).join(' ')
  output_makefile.push('$(KLAB_OUT)/built/' + dep_name + ': ' + subtarget_string + ' $(SPEC_SRCS)')
  output_makefile.push('\t$(BUILD) ' + dep_name)
  output_makefile.push('\t@mkdir -p $(dir $@)')
  output_makefile.push('\t@touch $@')
  output_makefile.push('')
  if (isPass) {
    pass.push(dep_name_without_rough)
    if (isRough) {
      pass_rough.push(dep_name)
    }
  } else {
    fail_rough.push(dep_name)
  }
}
output_makefile.push('$(KLAB_OUT)/accept/%__exhaustiveness: $(KLAB_OUT)/built/%__exhaustiveness')
output_makefile.push('\t$(PROVE) $*__exhaustiveness $(PROVE_ARGS)')
output_makefile.push('\t@mkdir -p $(dir $@)')
output_makefile.push('\t@touch $@')
output_makefile.push('')
output_makefile.push('$(KLAB_OUT)/accept/%_pass_rough: $(KLAB_OUT)/accept/%_pass_rough.dump')
output_makefile.push('\t@mkdir -p $(dir $@)')
output_makefile.push('\t@touch $@')
output_makefile.push('')
output_makefile.push('$(KLAB_OUT)/accept/%.dump: $(KLAB_OUT)/built/%')
output_makefile.push('\t$(PROVE_DUMP) $* $(PROVE_ARGS)')
output_makefile.push('\t$(CHECK_SUB_LEMMAS) $* $$($(HASH) $*)')
output_makefile.push('\t@mkdir -p $(dir $@)')
output_makefile.push('\t@touch $@')
output_makefile.push('')
output_makefile.push('$(KLAB_OUT)/accept/%_pass: $(KLAB_OUT)/built/%_pass')
output_makefile.push('\t$(PROVE) $*_pass $(PROVE_ARGS)')
output_makefile.push('\t@mkdir -p $(dir $@)')
output_makefile.push('\t@touch $@')
output_makefile.push('')
output_makefile.push('$(KLAB_OUT)/accept/%_fail_rough: $(KLAB_OUT)/built/%_fail_rough')
output_makefile.push('\t$(PROVE) $*_fail_rough $(PROVE_ARGS)')
output_makefile.push('\t@mkdir -p $(dir $@)')
output_makefile.push('\t@touch $@')
output_makefile.push('')
output_makefile.push('$(KLAB_OUT)/built/%__exhaustiveness: $(SPEC_SRCS)')
output_makefile.push('\t$(BUILD) $*__exhaustiveness')
output_makefile.push('\t@mkdir -p $(dir $@)')
output_makefile.push('\t@touch $@')
output_makefile.push('')
output_makefile.push('$(KLAB_OUT)/built/%_pass: $(KLAB_OUT)/gas/%_pass_rough.raw')
output_makefile.push('\t$(BUILD) $*_pass')
output_makefile.push('\t@mkdir -p $(dir $@)')
output_makefile.push('\t@touch $@')
output_makefile.push('')
output_makefile.push('$(KLAB_OUT)/gas/%_pass_rough.raw: $(KLAB_OUT)/accept/%_pass_rough.dump $(SPEC_SRCS)')
output_makefile.push('\t$(GET_GAS) $*_pass_rough')
output_makefile.push('\t$(WRITE_GAS) out/gas/$$($(HASH) $*_pass_rough).raw.kast.json > out/gas/$$($(HASH) $*_pass_rough).raw')
output_makefile.push('\tcp out/gas/$$($(HASH) $*_pass_rough).raw $@')
output_makefile.push('')
output_makefile.push('%.hash:')
output_makefile.push('\t$(HASH) $*')
output_makefile.push('')
output_makefile.push('%.klab-view:')
output_makefile.push('\t$(KLAB) debug $$($(HASH) $*)')
output_makefile.push('')
output_makefile.push('exhaustiveness_specs := ' + exhaustiveness.join(' \\\n                        '))
output_makefile.push('')
output_makefile.push('pass_rough_specs     := ' + pass_rough.join(' \\\n                        '))
output_makefile.push('')
output_makefile.push('pass_specs           := ' + pass.join(' \\\n                        '))
output_makefile.push('')
output_makefile.push('fail_rough_specs     := ' + fail_rough.join(' \\\n                        '))
output_makefile.push('')
output_makefile.push('all_specs            := $(exhaustiveness_specs) $(pass_rough_specs) $(pass_specs) $(fail_rough_specs)')
output_makefile.push('')
output_makefile.push('prove: $(patsubst %, $(KLAB_OUT)/accept/%, $(all_specs))')
output_makefile.push('')
output_makefile.push('.SECONDARY: $(patsubst %, $(KLAB_OUT)/built/%,       $(all_specs)) \\')
output_makefile.push('            $(patsubst %, $(KLAB_OUT)/accept/%,      $(all_specs)) \\')
output_makefile.push('            $(patsubst %, $(KLAB_OUT)/accept/%.dump, $(all_specs)) \\')
output_makefile.push('            $(patsubst %, $(KLAB_OUT)/gas/%,         $(all_specs)) \\')
output_makefile.push('            $(patsubst %, $(KLAB_OUT)/gas/%.raw,     $(all_specs))'   )
output_makefile.push('')

output_makefile.push('')
output_makefile.push('$(KLAB_OUT)/dir.timestamp:')
for (i in dir_list) {
  dir_name = dir_list[i]
  output_makefile.push('\tmkdir -p ' + dir_name)
}
output_makefile.push('\ttouch $@')

output_makefile.push('')
output_makefile.push('$(KLAB_OUT)/specs/verification-kompiled/timestamp: $(KLAB_OUT)/specs/verification.k')
output_makefile.push('\t$(KEVM) kompile --backend $(K_BACKEND) $< \\')
output_makefile.push('\t    --directory $(KLAB_OUT)/specs         \\')
output_makefile.push('\t    --main-module KLAB-VERIFICATION       \\')
output_makefile.push('\t    --syntax-module KLAB-VERIFICATION     \\')
output_makefile.push('\t    --concrete-rules $(CONCRETE_RULES)    \\')
output_makefile.push('\t    $(KOMPILE_OPTS)')

output_makefile.push('')
output_makefile.push('$(KLAB_OUT)/specs/verification.k: ' + config_json['src']['lemmas'] + ' $(KLAB_OUT)/specs/bin_runtime.k')
output_makefile.push('\techo > $@')
for (i in config_json['src']['requires']) {
  req_file = config_json['src']['requires'][i].replace('{KLAB_EVMS_PATH}', KLAB_EVMS_PATH)
  output_makefile.push('\techo \'requires "' + req_file + '"\' >> $@')
}
output_makefile.push('\techo >> $@')
output_makefile.push('\techo \'module KLAB-VERIFICATION\' >> $@')
for (i in config_json['src']['imports']) {
  req_import = config_json['src']['imports'][i]
  output_makefile.push('\techo \'    imports ' + req_import + '\' >> $@')
}
output_makefile.push('\techo >> $@')
output_makefile.push('\tcat $^ >> $@')
output_makefile.push('\techo >> $@')
output_makefile.push('\techo \'endmodule\' >> $@')

output_makefile.push('')
output_makefile.push('$(KLAB_OUT)/specs/bin_runtime.k: $(KLAB_OUT)/dir.timestamp')
output_makefile.push('\techo > $@')
for (i in config_json['implementations']) {
  bin_runtime_name = i + '_bin_runtime'
  output_makefile.push('\techo >> $@')
  output_makefile.push('\techo \'    syntax ByteArray ::= "' + bin_runtime_name + '"\' >> $@')
  output_makefile.push('\techo \'    rule ' + bin_runtime_name + ' => #parseByteStack("' + config_json['implementations'][i]['bin_runtime'] + '") [macro]\' >> $@')
}

console.log(output_makefile.join('\n'))
